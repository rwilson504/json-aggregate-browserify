!function(){var t,e,r=(t=function(t,e){"use strict";var r=Object.prototype.toString;t.exports=function(t){var e=r.call(t),o="[object Arguments]"===e;return o||(o="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===r.call(t.callee)),o}},function(r){return e||t(e={exports:{},parent:r},e.exports),e.exports});function o(t){return function(e,r,o){if("string"!=typeof e)return o;const n=Number(r[e]);return isNaN(n)||("min"===t?o<n:o>n)?o:n}}const n={$avg:function(){const t=Object.create(null);return function(e,r,o,n,i){0===i&&Object.keys(t).forEach(e=>delete t[e]);const a=JSON.stringify(n);let p;if("string"==typeof e)p=Number(r[e]);else{if(!Array.isArray(e))return o;p=e.reduce((t,e)=>t+Number(r[e]),0)/e.length}if(isNaN(p))return o;if(!t[a])return t[a]=[1,p],p;const[y,c]=t[a],u=(y*c+p)/(y+1);return t[a]=[y+1,u],u}}(),$first:function(t,e,r){if(r)return r;const o=e[t];return void 0===o?r:o},$last:(t,e)=>e[t],$max:o("max"),$min:o("min"),$sum:function(t,e,r){if(r=isNaN(r)?0:Number(r),1===t)return r+1;if("string"==typeof t){const o=Number(e[t]);return isNaN(o)?r:r+o}return null},$push:function(t,e,r){if(!t.length)return null;const o=t.reduce((t,r)=>(t[r]=e[r],t),{});return r?(r.push(o),r):[o]},$addToSet:function(t,e,r){if("string"!=typeof t)return null;const o=e[t];return r?(-1===r.indexOf(o)&&r.push(o),r):[o]}};var i,a=function(t){const{operatorObj:e,record:r,currentValue:o,groupId:i,recordIdx:a}=t;if("object"!=typeof e)return null;const p=Object.keys(e);if(p.length>1)return null;const y=p[0],c=e[y];return-1===Object.keys(n).indexOf(y)?null:n[y](c,r,o,i,a)};if(!Object.keys){var p=Object.prototype.hasOwnProperty,y=Object.prototype.toString,c=r({}),u=Object.prototype.propertyIsEnumerable,f=!u.call({toString:null},"toString"),l=u.call((function(){}),"prototype"),s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],d=function(t){var e=t.constructor;return e&&e.prototype===t},g={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},b=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!g["$"+t]&&p.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{d(window[t])}catch(e){return!0}}catch(e){return!0}return!1}();i=function(t){var r=null!==t&&"object"==typeof t,o="[object Function]"===y.call(t),n=c(t),i=r&&"[object String]"===y.call(t),a=[];if(!r&&!o&&!n)throw new TypeError("Object.keys called on a non-object");var u=l&&o;if(i&&t.length>0&&!p.call(t,0))for(var g=0;g<t.length;++g)a.push(String(g));if(n&&t.length>0)for(var h=0;h<t.length;++h)a.push(String(h));else for(var v in t)u&&"prototype"===v||!p.call(t,v)||a.push(String(v));if(f)for(var m=function(t){if("undefined"==typeof window||!b)return d(t);try{return d(t)}catch(e){return!1}}(t),A=0;A<s.length;++A)m&&"constructor"===s[A]||!p.call(t,s[A])||a.push(s[A]);return a}}var h=i,v={},m=Array.prototype.slice,A=r({}),O=Object.keys,j=O?function(t){return O(t)}:h,P=Object.keys;j.shim=function(){return Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return A(t)?P(m.call(t)):P(t)}):Object.keys=j,Object.keys||j},v=j;var S=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var o=Object.getOwnPropertySymbols(t);if(1!==o.length||o[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var n=Object.getOwnPropertyDescriptor(t,e);if(42!==n.value||!0!==n.enumerable)return!1}return!0},w=function(){return S()&&!!Symbol.toStringTag},E="undefined"!=typeof Symbol&&Symbol,I=Array.prototype.slice,F=Object.prototype.toString,x=Function.prototype.bind||function(t){var e=this;if("function"!=typeof e||"[object Function]"!==F.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,o=I.call(arguments,1),n=Math.max(0,e.length-o.length),i=[],a=0;a<n;a++)i.push("$"+a);if(r=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var n=e.apply(this,o.concat(I.call(arguments)));return Object(n)===n?n:this}return e.apply(t,o.concat(I.call(arguments)))})),e.prototype){var p=function(){};p.prototype=e.prototype,r.prototype=new p,p.prototype=null}return r},k=x.call(Function.call,Object.prototype.hasOwnProperty),R=SyntaxError,U=Function,N=TypeError,$=function(t){try{return U('"use strict"; return ('+t+").constructor;")()}catch(e){}},D=Object.getOwnPropertyDescriptor;if(D)try{D({},"")}catch(e){D=null}var B=function(){throw new N},G=D?function(){try{return B}catch(t){try{return D(arguments,"callee").get}catch(e){return B}}}():B,M="function"==typeof E&&"function"==typeof Symbol&&"symbol"==typeof E("foo")&&"symbol"==typeof Symbol("bar")&&S(),T=Object.getPrototypeOf||function(t){return t.__proto__},W={},_="undefined"==typeof Uint8Array?void 0:T(Uint8Array),C={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":M?T([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":W,"%AsyncGenerator%":W,"%AsyncGeneratorFunction%":W,"%AsyncIteratorPrototype%":W,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":U,"%GeneratorFunction%":W,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":M?T(T([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&M?T((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&M?T((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":M?T(""[Symbol.iterator]()):void 0,"%Symbol%":M?Symbol:void 0,"%SyntaxError%":R,"%ThrowTypeError%":G,"%TypedArray%":_,"%TypeError%":N,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet};try{null.error}catch(e){var J=T(T(e));C["%Error.prototype%"]=J}var V,z={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},H=x.call(Function.call,Array.prototype.concat),q=x.call(Function.apply,Array.prototype.splice),L=x.call(Function.call,String.prototype.replace),K=x.call(Function.call,String.prototype.slice),X=x.call(Function.call,RegExp.prototype.exec),Y=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,Q=/\\(\\)?/g,Z=function(t,e){var r,o=t;if(k(z,o)&&(o="%"+(r=z[o])[0]+"%"),k(C,o)){var n=C[o];if(n===W&&(n=function t(e){var r;if("%AsyncFunction%"===e)r=$("async function () {}");else if("%GeneratorFunction%"===e)r=$("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=$("async function* () {}");else if("%AsyncGenerator%"===e){var o=t("%AsyncGeneratorFunction%");o&&(r=o.prototype)}else if("%AsyncIteratorPrototype%"===e){var n=t("%AsyncGenerator%");n&&(r=T(n.prototype))}return C[e]=r,r}(o)),void 0===n&&!e)throw new N("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:o,value:n}}throw new R("intrinsic "+t+" does not exist!")},tt=function(t,e){if("string"!=typeof t||0===t.length)throw new N("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new N('"allowMissing" argument must be a boolean');if(null===X(/^%?[^%]*%?$/,t))throw new R("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=K(t,0,1),r=K(t,-1);if("%"===e&&"%"!==r)throw new R("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new R("invalid intrinsic syntax, expected opening `%`");var o=[];return L(t,Y,(function(t,e,r,n){o[o.length]=r?L(n,Q,"$1"):e||t})),o}(t),o=r.length>0?r[0]:"",n=Z("%"+o+"%",e),i=n.name,a=n.value,p=!1,y=n.alias;y&&(o=y[0],q(r,H([0,1],y)));for(var c=1,u=!0;c<r.length;c+=1){var f=r[c],l=K(f,0,1),s=K(f,-1);if(('"'===l||"'"===l||"`"===l||'"'===s||"'"===s||"`"===s)&&l!==s)throw new R("property names with quotes must have matching quotes");if("constructor"!==f&&u||(p=!0),k(C,i="%"+(o+="."+f)+"%"))a=C[i];else if(null!=a){if(!(f in a)){if(!e)throw new N("base intrinsic for "+t+" exists, but the property is not available.");return}if(D&&c+1>=r.length){var d=D(a,f);a=(u=!!d)&&"get"in d&&!("originalValue"in d.get)?d.get:a[f]}else u=k(a,f),a=a[f];u&&!p&&(C[i]=a)}}return a},et=tt("%Function.prototype.apply%"),rt=tt("%Function.prototype.call%"),ot=tt("%Reflect.apply%",!0)||x.call(rt,et),nt=tt("%Object.getOwnPropertyDescriptor%",!0),it=tt("%Object.defineProperty%",!0),at=tt("%Math.max%");if(it)try{it({},"a",{value:1})}catch(e){it=null}V=function(t){var e=ot(x,rt,arguments);return nt&&it&&nt(e,"length").configurable&&it(e,"length",{value:1+at(0,t.length-(arguments.length-1))}),e};var pt=function(){return ot(x,et,arguments)};it?it(V,"apply",{value:pt}):V.apply=pt;var yt=V(tt("String.prototype.indexOf")),ct=function(t,e){var r=tt(t,!!e);return"function"==typeof r&&yt(t,".prototype.")>-1?V(r):r},ut={},ft=w(),lt=ct("Object.prototype.toString"),st=function(t){return!(ft&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===lt(t)},dt=function(t){return!!st(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==lt(t)&&"[object Function]"===lt(t.callee)},gt=function(){return st(arguments)}();st.isLegacyArguments=dt,ut=gt?st:dt;var bt={},ht="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),vt=Object.prototype.toString,mt=Array.prototype.concat,At=Object.defineProperty,Ot=require(10)(),jt=At&&Ot,Pt=function(t,e,r,o){if(e in t)if(!0===o){if(t[e]===r)return}else if("function"!=typeof(n=o)||"[object Function]"!==vt.call(n)||!o())return;var n;jt?At(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r},St=function(t,e){var r=arguments.length>2?arguments[2]:{},o=v(e);ht&&(o=mt.call(o,Object.getOwnPropertySymbols(e)));for(var n=0;n<o.length;n+=1)Pt(t,o[n],e[o[n]],r[o[n]])};St.supportsDescriptors=!!jt,bt=St;var wt=function(t){return t!=t},Et=function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!wt(t)||!wt(e))},It=function(){return"function"==typeof Object.is?Object.is:Et},Ft={},xt=V(It(),Object);bt(xt,{getPolyfill:It,implementation:Et,shim:function(){var t=It();return bt(Object,{is:t},{is:function(){return Object.is!==t}}),t}}),Ft=xt;var kt,Rt,Ut,Nt,$t=w();if($t){kt=ct("Object.prototype.hasOwnProperty"),Rt=ct("RegExp.prototype.exec"),Ut={};var Dt=function(){throw Ut};Nt={toString:Dt,valueOf:Dt},"symbol"==typeof Symbol.toPrimitive&&(Nt[Symbol.toPrimitive]=Dt)}var Bt=ct("Object.prototype.toString"),Gt=Object.getOwnPropertyDescriptor,Mt=$t?function(t){if(!t||"object"!=typeof t)return!1;var r=Gt(t,"lastIndex");if(!r||!kt(r,"value"))return!1;try{Rt(t,Nt)}catch(e){return e===Ut}}:function(t){return!(!t||"object"!=typeof t&&"function"!=typeof t)&&"[object RegExp]"===Bt(t)},Tt=function(){return"string"==typeof function(){}.name},Wt=Object.getOwnPropertyDescriptor;if(Wt)try{Wt([],"length")}catch(e){Wt=null}Tt.functionsHaveConfigurableNames=function(){if(!Tt()||!Wt)return!1;var t=Wt((function(){}),"name");return!!t&&!!t.configurable};var _t=Function.prototype.bind;Tt.boundFunctionsHaveNames=function(){return Tt()&&"function"==typeof _t&&""!==function(){}.bind().name};var Ct,Jt=Tt.functionsHaveConfigurableNames(),Vt=Object,zt=TypeError;Ct=function(){if(null!=this&&this!==Vt(this))throw new zt("RegExp.prototype.flags getter called on non-object");var t="";return this.hasIndices&&(t+="d"),this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t},Jt&&Object.defineProperty&&Object.defineProperty(Ct,"name",{value:"get flags"});var Ht=bt.supportsDescriptors,qt=Object.getOwnPropertyDescriptor,Lt=function(){if(Ht&&"gim"===/a/gim.flags){var t=qt(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof RegExp.prototype.dotAll&&"boolean"==typeof RegExp.prototype.hasIndices){var e="",r={};if(Object.defineProperty(r,"hasIndices",{get:function(){e+="d"}}),Object.defineProperty(r,"sticky",{get:function(){e+="y"}}),"dy"===e)return t.get}}return Ct},Kt=bt.supportsDescriptors,Xt=Object.getOwnPropertyDescriptor,Yt=Object.defineProperty,Qt=TypeError,Zt=Object.getPrototypeOf,te=/a/,ee={},re=V(Lt());bt(re,{getPolyfill:Lt,implementation:Ct,shim:function(){if(!Kt||!Zt)throw new Qt("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=Lt(),e=Zt(te),r=Xt(e,"flags");return r&&r.get===t||Yt(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}}),ee=re;var oe=Date.prototype.getDay,ne=Object.prototype.toString,ie=w(),ae=function(t){return"object"==typeof t&&null!==t&&(ie?function(t){try{return oe.call(t),!0}catch(e){return!1}}(t):"[object Date]"===ne.call(t))},pe=Date.prototype.getTime;function ye(t){return null==t}function ce(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length||"function"!=typeof t.copy||"function"!=typeof t.slice||t.length>0&&"number"!=typeof t[0])}var ue=function t(r,o,n){var i=n||{};return!(i.strict?!Ft(r,o):r!==o)||(!r||!o||"object"!=typeof r&&"object"!=typeof o?i.strict?Ft(r,o):r==o:function(r,o,n){var i,a;if(typeof r!=typeof o)return!1;if(ye(r)||ye(o))return!1;if(r.prototype!==o.prototype)return!1;if(ut(r)!==ut(o))return!1;var p=Mt(r),y=Mt(o);if(p!==y)return!1;if(p||y)return r.source===o.source&&ee(r)===ee(o);if(ae(r)&&ae(o))return pe.call(r)===pe.call(o);var c=ce(r),u=ce(o);if(c!==u)return!1;if(c||u){if(r.length!==o.length)return!1;for(i=0;i<r.length;i++)if(r[i]!==o[i])return!1;return!0}if(typeof r!=typeof o)return!1;try{var f=v(r),l=v(o)}catch(e){return!1}if(f.length!==l.length)return!1;for(f.sort(),l.sort(),i=f.length-1;i>=0;i--)if(f[i]!=l[i])return!1;for(i=f.length-1;i>=0;i--)if(!t(r[a=f[i]],o[a],n))return!1;return!0}(r,o,i))},fe={getGroupId:function(t,e){if("string"==typeof t){const r=e[t];if("string"!=typeof r&&"number"!=typeof r)throw TypeError('Only types "string" and "number" are supported for group ids.');return r}if(Array.isArray(t))return t.reduce((t,r)=>(t[r]=e[r],t),{})},getGroup:function(t,e){let r;return Object.keys(t).length?r=e.findIndex(e=>{for(const r of Object.keys(e.id))if(t[r]!==e.id[r])return!1;return!0}):"string"!=typeof t&&"number"!=typeof t||(r=e.findIndex(e=>e.id===t)),-1===r?{id:t}:e.splice(r,1)[0]},getGroupKeys:function(t,e){if("string"==typeof t)-1===e.indexOf(t)&&e.push(t);else if("object"==typeof t){let r=!1;for(const o of e)if(ue(t,o.id)){r=!0;break}e.length&&r||e.push({id:t})}return e}};const{getGroupId:le,getGroup:se,getGroupKeys:de}=fe;var ge={create:function(t){let r;try{r=JSON.parse(t)}catch(e){return null}return r.length||(r=[r]),new class{constructor(t){this.data=this.cache=t}match(t){if("function"==typeof t)this.data=this.data.filter(t);else if("object"==typeof t){const e=Object.keys(t);this.data=this.data.reduce((r,o)=>{for(const n of e)if(o[n]!==t[n])return r;return r.push(o),r},[])}else 0;return this}unwind(t){const e=[];return this.data.forEach(r=>{const o=t.split(".").reduce((t,e)=>t?t[e]:r[e],null);o&&o.length?o.forEach(o=>{const n=Object.assign({},r,{[t]:o});e.push(n)}):e.push(r)}),this.data=e,this}group(t){let e;if("string"==typeof t||Array.isArray(t))e=t;else{if(-1===Object.keys(t).indexOf("id"))return this;e=t.id,delete t.id}return"string"==typeof t||Array.isArray(t)||0===Object.keys(t).length?(this.data=this.data.reduce((t,r)=>{const o=le(e,r);return de(o,t)},[]),this):"string"==typeof e||Array.isArray(e)?(this.data=this.data.reduce((r,o,n)=>{const i=Object.keys(t),p=le(e,o);if(void 0===p)return r;const y=se(p,r);for(const e of i)y[e]=a({operatorObj:t[e],currentValue:y[e],groupId:p,record:o,recordIdx:n});return r.push(y),r},[]),this):void 0}sort(t){if("object"!=typeof t||null===t)return this;for(const r of Object.keys(t)){const e=t[r];if(!Number.isInteger(e)||1!==Math.abs(e))throw SyntaxError("sort :: criteria need to use either 1 or -1.")}const e=Object.keys(t);return this.data=this.data.sort((function r(o,n,i=0){const a=e[i],p=t[a];return o[a]<n[a]?-1*p:o[a]>n[a]?1*p:r(o,n,i+1)})),this}limit(t){return this.data=this.data.slice(0,t),this}exec(){const{data:t}=this;return this.data=this.cache,t}}(r)}};(function(t){(function(){t.window.jsonAggregate=ge}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,